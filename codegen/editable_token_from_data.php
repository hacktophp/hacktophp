<?php // strict
/**
 * This file is generated. Do not modify it manually!
 *
 * @generated SignedSource<<7e6751d96c6b659722a49b478b4fd56a>>
 */
namespace HackToPhp\HHAST\Token\__Private;
use HackToPhp\HHAST;

function editable_token_from_data(
  string $file,
  int $offset,
  string $token_kind,
  HHAST\Node\EditableNode $leading,
  HHAST\Node\EditableNode $trailing,
  string $token_text
): HHAST\Token\EditableToken {
  $cls = TokenClassMap::WITHOUT_TEXT[$token_kind] ?? null;
  if ($cls !== null) {
    return new $cls($leading, $trailing);
  }
  $cls = TokenClassMap::WITH_TEXT[$token_kind] ?? null;
  if ($cls !== null) {
    return new $cls($leading, $trailing, $token_text);
  }
  throw new HHAST\UnsupportedTokenError($file, $offset, $token_kind);
}

class TokenClassMap {

  const WITH_TEXT = [
    'abstract' => HHAST\Token\AbstractToken::class,
    'and' => HHAST\Token\AndToken::class,
    'array' => HHAST\Token\ArrayToken::class,
    'arraykey' => HHAST\Token\ArraykeyToken::class,
    'as' => HHAST\Token\AsToken::class,
    'async' => HHAST\Token\AsyncToken::class,
    'attribute' => HHAST\Token\AttributeToken::class,
    'await' => HHAST\Token\AwaitToken::class,
    'binary' => HHAST\Token\BinaryToken::class,
    'bool' => HHAST\Token\BoolToken::class,
    'boolean' => HHAST\Token\BooleanToken::class,
    'break' => HHAST\Token\BreakToken::class,
    'case' => HHAST\Token\CaseToken::class,
    'catch' => HHAST\Token\CatchToken::class,
    'category' => HHAST\Token\CategoryToken::class,
    'children' => HHAST\Token\ChildrenToken::class,
    'class' => HHAST\Token\ClassToken::class,
    'classname' => HHAST\Token\ClassnameToken::class,
    'clone' => HHAST\Token\CloneToken::class,
    'const' => HHAST\Token\ConstToken::class,
    '__construct' => HHAST\Token\ConstructToken::class,
    'continue' => HHAST\Token\ContinueToken::class,
    'coroutine' => HHAST\Token\CoroutineToken::class,
    'darray' => HHAST\Token\DarrayToken::class,
    'declare' => HHAST\Token\DeclareToken::class,
    'default' => HHAST\Token\DefaultToken::class,
    'define' => HHAST\Token\DefineToken::class,
    '__destruct' => HHAST\Token\DestructToken::class,
    'dict' => HHAST\Token\DictToken::class,
    'do' => HHAST\Token\DoToken::class,
    'double' => HHAST\Token\DoubleToken::class,
    'echo' => HHAST\Token\EchoToken::class,
    'else' => HHAST\Token\ElseToken::class,
    'elseif' => HHAST\Token\ElseifToken::class,
    'empty' => HHAST\Token\EmptyToken::class,
    'enddeclare' => HHAST\Token\EnddeclareToken::class,
    'endfor' => HHAST\Token\EndforToken::class,
    'endforeach' => HHAST\Token\EndforeachToken::class,
    'endif' => HHAST\Token\EndifToken::class,
    'endswitch' => HHAST\Token\EndswitchToken::class,
    'endwhile' => HHAST\Token\EndwhileToken::class,
    'enum' => HHAST\Token\EnumToken::class,
    'eval' => HHAST\Token\EvalToken::class,
    'extends' => HHAST\Token\ExtendsToken::class,
    'fallthrough' => HHAST\Token\FallthroughToken::class,
    'final' => HHAST\Token\FinalToken::class,
    'finally' => HHAST\Token\FinallyToken::class,
    'float' => HHAST\Token\FloatToken::class,
    'for' => HHAST\Token\ForToken::class,
    'foreach' => HHAST\Token\ForeachToken::class,
    'from' => HHAST\Token\FromToken::class,
    'function' => HHAST\Token\FunctionToken::class,
    'global' => HHAST\Token\GlobalToken::class,
    'goto' => HHAST\Token\GotoToken::class,
    '__halt_compiler' => HHAST\Token\HaltCompilerToken::class,
    'if' => HHAST\Token\IfToken::class,
    'implements' => HHAST\Token\ImplementsToken::class,
    'include' => HHAST\Token\IncludeToken::class,
    'include_once' => HHAST\Token\Include_onceToken::class,
    'inout' => HHAST\Token\InoutToken::class,
    'instanceof' => HHAST\Token\InstanceofToken::class,
    'insteadof' => HHAST\Token\InsteadofToken::class,
    'int' => HHAST\Token\IntToken::class,
    'integer' => HHAST\Token\IntegerToken::class,
    'interface' => HHAST\Token\InterfaceToken::class,
    'is' => HHAST\Token\IsToken::class,
    'isset' => HHAST\Token\IssetToken::class,
    'keyset' => HHAST\Token\KeysetToken::class,
    'let' => HHAST\Token\LetToken::class,
    'list' => HHAST\Token\ListToken::class,
    'mixed' => HHAST\Token\MixedToken::class,
    'namespace' => HHAST\Token\NamespaceToken::class,
    'new' => HHAST\Token\NewToken::class,
    'newtype' => HHAST\Token\NewtypeToken::class,
    'noreturn' => HHAST\Token\NoreturnToken::class,
    'null' => HHAST\Token\NullLiteralToken::class,
    'num' => HHAST\Token\NumToken::class,
    'object' => HHAST\Token\ObjectToken::class,
    'or' => HHAST\Token\OrToken::class,
    'parent' => HHAST\Token\ParentToken::class,
    'print' => HHAST\Token\PrintToken::class,
    'private' => HHAST\Token\PrivateToken::class,
    'protected' => HHAST\Token\ProtectedToken::class,
    'public' => HHAST\Token\PublicToken::class,
    '?as' => HHAST\Token\QuestionAsToken::class,
    'real' => HHAST\Token\RealToken::class,
    'reified' => HHAST\Token\ReifiedToken::class,
    'require' => HHAST\Token\RequireToken::class,
    'require_once' => HHAST\Token\Require_onceToken::class,
    'required' => HHAST\Token\RequiredToken::class,
    'resource' => HHAST\Token\ResourceToken::class,
    'return' => HHAST\Token\ReturnToken::class,
    'self' => HHAST\Token\SelfToken::class,
    'shape' => HHAST\Token\ShapeToken::class,
    'static' => HHAST\Token\StaticToken::class,
    'string' => HHAST\Token\StringToken::class,
    'super' => HHAST\Token\SuperToken::class,
    'suspend' => HHAST\Token\SuspendToken::class,
    'switch' => HHAST\Token\SwitchToken::class,
    'this' => HHAST\Token\ThisToken::class,
    'throw' => HHAST\Token\ThrowToken::class,
    'trait' => HHAST\Token\TraitToken::class,
    'try' => HHAST\Token\TryToken::class,
    'tuple' => HHAST\Token\TupleToken::class,
    'type' => HHAST\Token\TypeToken::class,
    'unset' => HHAST\Token\UnsetToken::class,
    'use' => HHAST\Token\UseToken::class,
    'using' => HHAST\Token\UsingToken::class,
    'var' => HHAST\Token\VarToken::class,
    'varray' => HHAST\Token\VarrayToken::class,
    'vec' => HHAST\Token\VecToken::class,
    'void' => HHAST\Token\VoidToken::class,
    'where' => HHAST\Token\WhereToken::class,
    'while' => HHAST\Token\WhileToken::class,
    'xor' => HHAST\Token\XorToken::class,
    'yield' => HHAST\Token\YieldToken::class,
    'binary_literal' => HHAST\Token\BinaryLiteralToken::class,
    'boolean_literal' => HHAST\Token\BooleanLiteralToken::class,
    'decimal_literal' => HHAST\Token\DecimalLiteralToken::class,
    'double_quoted_string_literal' =>
      HHAST\Token\DoubleQuotedStringLiteralToken::class,
    'double_quoted_string_literal_head' =>
      HHAST\Token\DoubleQuotedStringLiteralHeadToken::class,
    'double_quoted_string_literal_tail' =>
      HHAST\Token\DoubleQuotedStringLiteralTailToken::class,
    'error_token' => HHAST\Token\ErrorTokenToken::class,
    'execution_string_literal' => HHAST\Token\ExecutionStringLiteralToken::class,
    'execution_string_literal_head' =>
      HHAST\Token\ExecutionStringLiteralHeadToken::class,
    'execution_string_literal_tail' =>
      HHAST\Token\ExecutionStringLiteralTailToken::class,
    'floating_literal' => HHAST\Token\FloatingLiteralToken::class,
    'heredoc_string_literal' => HHAST\Token\HeredocStringLiteralToken::class,
    'heredoc_string_literal_head' => HHAST\Token\HeredocStringLiteralHeadToken::class,
    'heredoc_string_literal_tail' => HHAST\Token\HeredocStringLiteralTailToken::class,
    'hexadecimal_literal' => HHAST\Token\HexadecimalLiteralToken::class,
    'markup' => HHAST\Token\MarkupToken::class,
    'name' => HHAST\Token\NameToken::class,
    'nowdoc_string_literal' => HHAST\Token\NowdocStringLiteralToken::class,
    'octal_literal' => HHAST\Token\OctalLiteralToken::class,
    'single_quoted_string_literal' =>
      HHAST\Token\SingleQuotedStringLiteralToken::class,
    'string_literal_body' => HHAST\Token\StringLiteralBodyToken::class,
    'variable' => HHAST\Token\VariableToken::class,
    'XHP_body' => HHAST\Token\XHPBodyToken::class,
    'XHP_category_name' => HHAST\Token\XHPCategoryNameToken::class,
    'XHP_class_name' => HHAST\Token\XHPClassNameToken::class,
    'XHP_comment' => HHAST\Token\XHPCommentToken::class,
    'XHP_element_name' => HHAST\Token\XHPElementNameToken::class,
    'XHP_string_literal' => HHAST\Token\XHPStringLiteralToken::class,
  ];
  const WITHOUT_TEXT = [
      'end_of_file' => HHAST\Token\EndOfFileToken::class,
      '&' => HHAST\Token\AmpersandToken::class,
      '&&' => HHAST\Token\AmpersandAmpersandToken::class,
      '&=' => HHAST\Token\AmpersandEqualToken::class,
      '@' => HHAST\Token\AtToken::class,
      '\\' => HHAST\Token\BackslashToken::class,
      '|' => HHAST\Token\BarToken::class,
      '||' => HHAST\Token\BarBarToken::class,
      '|=' => HHAST\Token\BarEqualToken::class,
      '|>' => HHAST\Token\BarGreaterThanToken::class,
      '^' => HHAST\Token\CaratToken::class,
      '^=' => HHAST\Token\CaratEqualToken::class,
      ':' => HHAST\Token\ColonToken::class,
      '::' => HHAST\Token\ColonColonToken::class,
      ',' => HHAST\Token\CommaToken::class,
      '$' => HHAST\Token\DollarToken::class,
      '$$' => HHAST\Token\DollarDollarToken::class,
      '.' => HHAST\Token\DotToken::class,
      '...' => HHAST\Token\DotDotDotToken::class,
      '.=' => HHAST\Token\DotEqualToken::class,
      '=' => HHAST\Token\EqualToken::class,
      '==' => HHAST\Token\EqualEqualToken::class,
      '===' => HHAST\Token\EqualEqualEqualToken::class,
      '==>' => HHAST\Token\EqualEqualGreaterThanToken::class,
      '=>' => HHAST\Token\EqualGreaterThanToken::class,
      '!' => HHAST\Token\ExclamationToken::class,
      '!=' => HHAST\Token\ExclamationEqualToken::class,
      '!==' => HHAST\Token\ExclamationEqualEqualToken::class,
      '>' => HHAST\Token\GreaterThanToken::class,
      '>=' => HHAST\Token\GreaterThanEqualToken::class,
      '>>' => HHAST\Token\GreaterThanGreaterThanToken::class,
      '>>=' => HHAST\Token\GreaterThanGreaterThanEqualToken::class,
      '{' => HHAST\Token\LeftBraceToken::class,
      '[' => HHAST\Token\LeftBracketToken::class,
      '(' => HHAST\Token\LeftParenToken::class,
      '<' => HHAST\Token\LessThanToken::class,
      '<=' => HHAST\Token\LessThanEqualToken::class,
      '<=>' => HHAST\Token\LessThanEqualGreaterThanToken::class,
      '<>' => HHAST\Token\LessThanGreaterThanToken::class,
      '<<' => HHAST\Token\LessThanLessThanToken::class,
      '<<=' => HHAST\Token\LessThanLessThanEqualToken::class,
      '<?' => HHAST\Token\LessThanQuestionToken::class,
      '</' => HHAST\Token\LessThanSlashToken::class,
      '-' => HHAST\Token\MinusToken::class,
      '-=' => HHAST\Token\MinusEqualToken::class,
      '->' => HHAST\Token\MinusGreaterThanToken::class,
      '--' => HHAST\Token\MinusMinusToken::class,
      '%' => HHAST\Token\PercentToken::class,
      '%=' => HHAST\Token\PercentEqualToken::class,
      '+' => HHAST\Token\PlusToken::class,
      '+=' => HHAST\Token\PlusEqualToken::class,
      '++' => HHAST\Token\PlusPlusToken::class,
      '?' => HHAST\Token\QuestionToken::class,
      '?:' => HHAST\Token\QuestionColonToken::class,
      '?>' => HHAST\Token\QuestionGreaterThanToken::class,
      '?->' => HHAST\Token\QuestionMinusGreaterThanToken::class,
      '??' => HHAST\Token\QuestionQuestionToken::class,
      '??=' => HHAST\Token\QuestionQuestionEqualToken::class,
      '}' => HHAST\Token\RightBraceToken::class,
      ']' => HHAST\Token\RightBracketToken::class,
      ')' => HHAST\Token\RightParenToken::class,
      ';' => HHAST\Token\SemicolonToken::class,
      '/' => HHAST\Token\SlashToken::class,
      '/=' => HHAST\Token\SlashEqualToken::class,
      '/>' => HHAST\Token\SlashGreaterThanToken::class,
      '*' => HHAST\Token\StarToken::class,
      '*=' => HHAST\Token\StarEqualToken::class,
      '**' => HHAST\Token\StarStarToken::class,
      '**=' => HHAST\Token\StarStarEqualToken::class,
      '~' => HHAST\Token\TildeToken::class,
    ];
}
